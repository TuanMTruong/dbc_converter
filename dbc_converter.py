#! /usr/bin/python

import cantools as ct
import argparse



def writeLine(fd,string=''):
	fd.write(string + '\n')


parser = argparse.ArgumentParser(description='Convert CAN DBC file to C++ code.')
parser.add_argument('dbc', type=str, help='DBC file.')
parser.add_argument('-o', type=str, help='Output file', dest='out_file')
args = parser.parse_args()

dbc_filename = args.dbc
output_filename = args.out_file

messsages = ct.db.load_file(dbc_filename).messages
print 'DBC file:', dbc_filename
print 'Number of messages:', len(messsages)

fd = open(output_filename, 'wt')

writeLine(fd, '/******************************** DO NOT EDIT THIS FILE, IT WAS AUTOMATICALLY GENERATED********************************/')
writeLine(fd, '#pragma once')
writeLine(fd)

# print messsages[0]
# print messsages[0].signals[0]


writeLine(fd, 'typedef enum CAN_IDS {')

for m in messsages:
	writeLine(fd, '\t'+ m.name + '_id = ' + str(m.frame_id))

writeLine(fd, '} Message_IDs;')

writeLine(fd)

for m in messsages:

	dataStructName = m.name# + '_data'

	writeLine(fd, '// ' + m.name)

	for s in m.signals:
		if s.choices:
			writeLine(fd, 'typedef enum ' + m.name + '_' + s.name + '_t' + '{')
			choiceLength = len(s.choices)
			num = 0
			for c in s.choices:
				num = num + 1;
				line = '\t' + s.choices[c] + ' = ' + str(c)
				if num < choiceLength:
					line = line + ','

				writeLine(fd, line)
			writeLine(fd, '};')
			writeLine(fd)

	writeLine(fd, 'struct __attribute__((_packed__)) ' + dataStructName + '{')
	for s in m.signals:
		typeName = ''
		if s.choices:
			typeName = m.name + '_' + s.name + '_t'
		else:
			if not s.is_signed:
				typeName = typeName + 'u'
			typeName = typeName +'int' + str(s.length) + '_t'
		writeLine(fd, '\t// min = ' + str(s.minimum) + ' max = ' + str(s.maximum) + ' units: ' + str(s.unit))
		writeLine(fd, '\t// ' + s.byte_order)
		writeLine(fd, '\t' + typeName + ' ' + s.name + ';')
	writeLine(fd, '};')
	writeLine(fd)


writeLine(fd, '/**********************************************************************************************************************/')